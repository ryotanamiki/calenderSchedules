<!DOCTYPE html>
<html lang="ja">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>カレンダースケジュール</title>
    <link rel="stylesheet" href="/css/style.css">
</head>

<body id="index">
    <h1>カレンダースケジュール</h1>
    <!-- <small>（送信・閉じるボタンを押せば自動更新）<br>（×ボタンで閉じるとリロード必要）</small> -->
    <div id="calender">
        <h2 id="calenderTitle"></h2>
        <div class="buttons">
            <button id="prevBtn">&lt;</button>
            <button id="nextBtn">&gt;</button>
        </div>
        <table>
            <tbody id="calenderBody">
            </tbody>
        </table>
    </div>
    <script>
            // データ取得
            const schedule = JSON.parse('<%= JSON.stringify(schedule) %>'.replace(/&#34;/g, '"'))
            // DOM取得
            const calenderTitle = document.querySelector('#calenderTitle')
            const calenderBody = document.querySelector('#calenderBody')
            const prevBtn = document.querySelector('#prevBtn')
            const nextBtn = document.querySelector('#nextBtn')

            // 必要データ（デフォルトの値）
            // 年月日
            let year = 2023
            let month = 7
            let date = 31
            // 曜日（0:日 ーーー 6:土)
            let weekDay = 1
            // 今月の初日の曜日
            let fstWeekDay = 6
            // 今月の最終日の曜日
            let lstWeekDay = 6
            let aftCell = 2
            // 今月が何日か
            let days = 31
            // カレンダーの行数
            let rows = 6
            // カレンダーの枠
            let cell = []
            // 今日の日付
            let today = new Date()

            // イベント
            // 今月のカレンダー生成
            window.addEventListener('load', () => {
                getDayData(today)
                createCalender()
                inputData()
            })
            // ボタンクリックで月変更
            prevBtn.addEventListener('click', () => {
                prevMonth(today)
                createCalender()
                inputData()
            })
            nextBtn.addEventListener('click', () => {
                nextMonth(today)
                createCalender()
                inputData()
            })
            // ポップアップ
            document.addEventListener('click', function (e) {
                let h = 400
                let w = 400
                let wTop = window.screenTop + (window.innerHeight / 2) - (h / 4)
                let wLeft = window.screenLeft + (window.innerWidth / 2) - (w / 2)
                let dt = e.target.dataset.date
                let url = new Date(dt).toLocaleDateString()
                url = url.replace('/', '-').replace('/', '-')
                let id = e.target.dataset.id
                // 表示画面へ
                if (e.target.classList.contains('schTitle')) {
                    window.open(
                    `/show/${id}`, '', `width=${w}, height=${h}, top=${wTop}, left=${wLeft}`
                );
            }
            // 入力画面へ
            else if (
                e.target.classList.contains('calender-day') // 曜日を除外
                && e.target.classList.contains('haveSch') == false // スケジュール登録済みを除外
                && dt !== '' // 日付表示のないものを除外
            ) {
                window.open(
                    `/create/${url}`, '', `width=${w}, height=${h}, top=${wTop}, left=${wLeft}`
                );
            }
        })

            // 前の月のデータ取得
            function prevMonth(day) {
                day.setMonth(day.getMonth() - 1)
                getDayData(day)
            }
            // 次の月のデータ取得
            function nextMonth(day) {
                day.setMonth(day.getMonth() + 1)
                getDayData(day)
            }
            // データベースのスケジュール格納
            function inputData() {
                let tdAll = document.querySelectorAll('.calender-day')
                let tdArray = Array.prototype.slice.call(tdAll) //配列に変換
                let tds = tdArray.filter((elm) => elm.innerHTML !== '') //日付の入ったtdだけ取得

            tds.forEach(td => {
                let tdDate = new Date(td.dataset.date).toLocaleDateString()
                tdDate = tdDate.replace('/', '-').replace('/', '-')
                schedule.forEach(value => {
                    if (tdDate === value.date) {
                        td.classList.add('haveSch')
                        if (value.title !== '') {
                            td.innerHTML += `<span class="schTitle" data-id="${value.id}">${value.title}</span>`
                        } else {
                            td.innerHTML += `<span class="schTitle" data-id="${value.id}">タイトルなし</span>`
                        }
                    }
                })
            })
        }

            // 日付（引数）からデータ取得
            function getDayData(val) {
                year = val.getFullYear()
                month = val.getMonth() + 1
                date = val.getDate()
                weekDay = val.getDay()
            days = new Date(year, month, 0).getDate()
            fstWeekDay = new Date(year, month - 1, 1).getDay()
            lstWeekDay = new Date(year, month, 0).getDay()
            aftCell = 7 - lstWeekDay - 1
            rows = Math.ceil((fstWeekDay + days + aftCell - 1) / 7)
        }

            // カレンダー生成
            function createCalender() {
            createCell()

            calenderBody.innerHTML = ''
            calenderTitle.innerHTML = ''

            calenderBody.insertAdjacentHTML('beforeend', `
                <tr>
                    <td>日</td>
                    <td>月</td>
                    <td>火</td>
                    <td>水</td>
                    <td>木</td>
                    <td>金</td>
                    <td>土</td>
                </tr>
                `)
            // カレンダーの中身
            for (let i = 0; i < rows; i++) {
                calenderBody.insertAdjacentHTML('beforeend', `
                    <tr class="days">
                        <td class="calender-day" data-date="${cell[i][0]}"><p>${cell[i][1]}</p></td>
                        <td class="calender-day" data-date="${cell[i][2]}"><p>${cell[i][3]}</p></td>
                        <td class="calender-day" data-date="${cell[i][4]}"><p>${cell[i][5]}</p></td>
                        <td class="calender-day" data-date="${cell[i][6]}"><p>${cell[i][7]}</p></td>
                        <td class="calender-day" data-date="${cell[i][8]}"><p>${cell[i][9]}</p></td>
                        <td class="calender-day" data-date="${cell[i][10]}"><p>${cell[i][11]}</p></td>
                        <td class="calender-day" data-date="${cell[i][12]}"><p>${cell[i][13]}</p></td>
                    <tr>
                    `)

            }
                    // 上部に年月表示
                    calenderTitle.innerHTML += `${year}年${month}月`
                }
                // カレンダーの枠の中身用配列の生成
                function createCell() {
                    let a = []
                    // tdの中身を配列可
                    for (let i = 1; i <= fstWeekDay; i++) {
                        // 月初めの空白
                        a.push('', '')
                    }
            for (let i = 1; i <= days; i++) {
                // 日付
                let b = new Date(year, month - 1, i)
                a.push(b, b.getDate())
            }
            for (let i = 1; i <= aftCell; i++) {
                // 月終わりの空白
                a.push('', '')
            }
            // 配列を７つに分割
            for (let i = 0; i < rows; i++) {
                cell[i] = a.slice(i * 14, (i + 1) * 14)
            }
        }
    </script>
</body>

</html>